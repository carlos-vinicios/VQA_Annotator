datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String?   @unique
  token         String?
  stage         String?
  accounts      Account[]
  sessions      Session[]
}

type Metadata {
  text          Boolean
  image         Boolean
  form          Boolean
  table         Boolean
}

model Report {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  ticker        String
  filename      String
  qtd_pages     Int
  tipo          String
  selecting     Boolean   @default(false)
  avaiable      Boolean
  priority      Boolean
  metadatas     Metadata[]
//  pages         Page[]
}

//type Validation {
//  response                  String
//  similarity                Int?
//  validationElapsedTime     Int
//}

//model Question {
//  id            String    @id @default(auto()) @map("_id") @db.ObjectId
//  pageId        String    @db.ObjectId
//  page          Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
//  question      String
//  response      String
//  validation    Validation?
//  validatorId   String?   @db.ObjectId
//  validating    Boolean   @default(false)
//}

type BoundingBox {
  x      Int
  y      Int
  w      Int
  h      Int
}

type Usage {
  completion_tokens   Int
  prompt_tokens       Int
  total_tokens        Int
}

type QAs {
  model_question      String
  questions_boxes     BoundingBox[]
  user_question       String
  model_answer        String
  answer_boxes        BoundingBox[]
  user_answer         String
  validated           Boolean   @default(false)
  deleted             Boolean   @default(false)
}

type PageDimension {
  width       Int
  height      Int
}

model PageTest {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  filename             String
  ticker               String
  page                 Int
  dimension            PageDimension
  qas                  QAs[]
  usages               Usage[]
  user                 String
  elapsedTime          Int?
  annotated            Boolean   @default(false)

  @@map("PageTest")
}
